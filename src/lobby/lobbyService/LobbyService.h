/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LobbyService_H
#define LobbyService_H

#include <thrift/TDispatchProcessor.h>
#include "lobbyService_types.h"

namespace lobbyThriftService {

class LobbyServiceIf {
 public:
  virtual ~LobbyServiceIf() {}
  virtual void Login(LoginResponse& _return, const LoginRequest& request) = 0;
  virtual void ListServers(ListServersResponse& _return) = 0;
  virtual void JoinMission(JoinMissionResponse& _return, const JoinMissionRequest& request) = 0;
  virtual void FindPlayer(FindPlayerResponse& _return, const FindPlayerRequest& request) = 0;
  virtual void CreateMission(CreateMissionResponse& _return, const CreateMissionRequest& request) = 0;
};

class LobbyServiceIfFactory {
 public:
  typedef LobbyServiceIf Handler;

  virtual ~LobbyServiceIfFactory() {}

  virtual LobbyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LobbyServiceIf* /* handler */) = 0;
};

class LobbyServiceIfSingletonFactory : virtual public LobbyServiceIfFactory {
 public:
  LobbyServiceIfSingletonFactory(const boost::shared_ptr<LobbyServiceIf>& iface) : iface_(iface) {}
  virtual ~LobbyServiceIfSingletonFactory() {}

  virtual LobbyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LobbyServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LobbyServiceIf> iface_;
};

class LobbyServiceNull : virtual public LobbyServiceIf {
 public:
  virtual ~LobbyServiceNull() {}
  void Login(LoginResponse& /* _return */, const LoginRequest& /* request */) {
    return;
  }
  void ListServers(ListServersResponse& /* _return */) {
    return;
  }
  void JoinMission(JoinMissionResponse& /* _return */, const JoinMissionRequest& /* request */) {
    return;
  }
  void FindPlayer(FindPlayerResponse& /* _return */, const FindPlayerRequest& /* request */) {
    return;
  }
  void CreateMission(CreateMissionResponse& /* _return */, const CreateMissionRequest& /* request */) {
    return;
  }
};

typedef struct _LobbyService_Login_args__isset {
  _LobbyService_Login_args__isset() : request(false) {}
  bool request;
} _LobbyService_Login_args__isset;

class LobbyService_Login_args {
 public:

  LobbyService_Login_args() {
  }

  virtual ~LobbyService_Login_args() throw() {}

  LoginRequest request;

  _LobbyService_Login_args__isset __isset;

  void __set_request(const LoginRequest& val) {
    request = val;
  }

  bool operator == (const LobbyService_Login_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const LobbyService_Login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_Login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LobbyService_Login_pargs {
 public:


  virtual ~LobbyService_Login_pargs() throw() {}

  const LoginRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_Login_result__isset {
  _LobbyService_Login_result__isset() : success(false) {}
  bool success;
} _LobbyService_Login_result__isset;

class LobbyService_Login_result {
 public:

  LobbyService_Login_result() {
  }

  virtual ~LobbyService_Login_result() throw() {}

  LoginResponse success;

  _LobbyService_Login_result__isset __isset;

  void __set_success(const LoginResponse& val) {
    success = val;
  }

  bool operator == (const LobbyService_Login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LobbyService_Login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_Login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_Login_presult__isset {
  _LobbyService_Login_presult__isset() : success(false) {}
  bool success;
} _LobbyService_Login_presult__isset;

class LobbyService_Login_presult {
 public:


  virtual ~LobbyService_Login_presult() throw() {}

  LoginResponse* success;

  _LobbyService_Login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LobbyService_ListServers_args {
 public:

  LobbyService_ListServers_args() {
  }

  virtual ~LobbyService_ListServers_args() throw() {}


  bool operator == (const LobbyService_ListServers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LobbyService_ListServers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_ListServers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LobbyService_ListServers_pargs {
 public:


  virtual ~LobbyService_ListServers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_ListServers_result__isset {
  _LobbyService_ListServers_result__isset() : success(false) {}
  bool success;
} _LobbyService_ListServers_result__isset;

class LobbyService_ListServers_result {
 public:

  LobbyService_ListServers_result() {
  }

  virtual ~LobbyService_ListServers_result() throw() {}

  ListServersResponse success;

  _LobbyService_ListServers_result__isset __isset;

  void __set_success(const ListServersResponse& val) {
    success = val;
  }

  bool operator == (const LobbyService_ListServers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LobbyService_ListServers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_ListServers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_ListServers_presult__isset {
  _LobbyService_ListServers_presult__isset() : success(false) {}
  bool success;
} _LobbyService_ListServers_presult__isset;

class LobbyService_ListServers_presult {
 public:


  virtual ~LobbyService_ListServers_presult() throw() {}

  ListServersResponse* success;

  _LobbyService_ListServers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LobbyService_JoinMission_args__isset {
  _LobbyService_JoinMission_args__isset() : request(false) {}
  bool request;
} _LobbyService_JoinMission_args__isset;

class LobbyService_JoinMission_args {
 public:

  LobbyService_JoinMission_args() {
  }

  virtual ~LobbyService_JoinMission_args() throw() {}

  JoinMissionRequest request;

  _LobbyService_JoinMission_args__isset __isset;

  void __set_request(const JoinMissionRequest& val) {
    request = val;
  }

  bool operator == (const LobbyService_JoinMission_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const LobbyService_JoinMission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_JoinMission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LobbyService_JoinMission_pargs {
 public:


  virtual ~LobbyService_JoinMission_pargs() throw() {}

  const JoinMissionRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_JoinMission_result__isset {
  _LobbyService_JoinMission_result__isset() : success(false) {}
  bool success;
} _LobbyService_JoinMission_result__isset;

class LobbyService_JoinMission_result {
 public:

  LobbyService_JoinMission_result() {
  }

  virtual ~LobbyService_JoinMission_result() throw() {}

  JoinMissionResponse success;

  _LobbyService_JoinMission_result__isset __isset;

  void __set_success(const JoinMissionResponse& val) {
    success = val;
  }

  bool operator == (const LobbyService_JoinMission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LobbyService_JoinMission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_JoinMission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_JoinMission_presult__isset {
  _LobbyService_JoinMission_presult__isset() : success(false) {}
  bool success;
} _LobbyService_JoinMission_presult__isset;

class LobbyService_JoinMission_presult {
 public:


  virtual ~LobbyService_JoinMission_presult() throw() {}

  JoinMissionResponse* success;

  _LobbyService_JoinMission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LobbyService_FindPlayer_args__isset {
  _LobbyService_FindPlayer_args__isset() : request(false) {}
  bool request;
} _LobbyService_FindPlayer_args__isset;

class LobbyService_FindPlayer_args {
 public:

  LobbyService_FindPlayer_args() {
  }

  virtual ~LobbyService_FindPlayer_args() throw() {}

  FindPlayerRequest request;

  _LobbyService_FindPlayer_args__isset __isset;

  void __set_request(const FindPlayerRequest& val) {
    request = val;
  }

  bool operator == (const LobbyService_FindPlayer_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const LobbyService_FindPlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_FindPlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LobbyService_FindPlayer_pargs {
 public:


  virtual ~LobbyService_FindPlayer_pargs() throw() {}

  const FindPlayerRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_FindPlayer_result__isset {
  _LobbyService_FindPlayer_result__isset() : success(false) {}
  bool success;
} _LobbyService_FindPlayer_result__isset;

class LobbyService_FindPlayer_result {
 public:

  LobbyService_FindPlayer_result() {
  }

  virtual ~LobbyService_FindPlayer_result() throw() {}

  FindPlayerResponse success;

  _LobbyService_FindPlayer_result__isset __isset;

  void __set_success(const FindPlayerResponse& val) {
    success = val;
  }

  bool operator == (const LobbyService_FindPlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LobbyService_FindPlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_FindPlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_FindPlayer_presult__isset {
  _LobbyService_FindPlayer_presult__isset() : success(false) {}
  bool success;
} _LobbyService_FindPlayer_presult__isset;

class LobbyService_FindPlayer_presult {
 public:


  virtual ~LobbyService_FindPlayer_presult() throw() {}

  FindPlayerResponse* success;

  _LobbyService_FindPlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LobbyService_CreateMission_args__isset {
  _LobbyService_CreateMission_args__isset() : request(false) {}
  bool request;
} _LobbyService_CreateMission_args__isset;

class LobbyService_CreateMission_args {
 public:

  LobbyService_CreateMission_args() {
  }

  virtual ~LobbyService_CreateMission_args() throw() {}

  CreateMissionRequest request;

  _LobbyService_CreateMission_args__isset __isset;

  void __set_request(const CreateMissionRequest& val) {
    request = val;
  }

  bool operator == (const LobbyService_CreateMission_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const LobbyService_CreateMission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_CreateMission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LobbyService_CreateMission_pargs {
 public:


  virtual ~LobbyService_CreateMission_pargs() throw() {}

  const CreateMissionRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_CreateMission_result__isset {
  _LobbyService_CreateMission_result__isset() : success(false) {}
  bool success;
} _LobbyService_CreateMission_result__isset;

class LobbyService_CreateMission_result {
 public:

  LobbyService_CreateMission_result() {
  }

  virtual ~LobbyService_CreateMission_result() throw() {}

  CreateMissionResponse success;

  _LobbyService_CreateMission_result__isset __isset;

  void __set_success(const CreateMissionResponse& val) {
    success = val;
  }

  bool operator == (const LobbyService_CreateMission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LobbyService_CreateMission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LobbyService_CreateMission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LobbyService_CreateMission_presult__isset {
  _LobbyService_CreateMission_presult__isset() : success(false) {}
  bool success;
} _LobbyService_CreateMission_presult__isset;

class LobbyService_CreateMission_presult {
 public:


  virtual ~LobbyService_CreateMission_presult() throw() {}

  CreateMissionResponse* success;

  _LobbyService_CreateMission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LobbyServiceClient : virtual public LobbyServiceIf {
 public:
  LobbyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  LobbyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Login(LoginResponse& _return, const LoginRequest& request);
  void send_Login(const LoginRequest& request);
  void recv_Login(LoginResponse& _return);
  void ListServers(ListServersResponse& _return);
  void send_ListServers();
  void recv_ListServers(ListServersResponse& _return);
  void JoinMission(JoinMissionResponse& _return, const JoinMissionRequest& request);
  void send_JoinMission(const JoinMissionRequest& request);
  void recv_JoinMission(JoinMissionResponse& _return);
  void FindPlayer(FindPlayerResponse& _return, const FindPlayerRequest& request);
  void send_FindPlayer(const FindPlayerRequest& request);
  void recv_FindPlayer(FindPlayerResponse& _return);
  void CreateMission(CreateMissionResponse& _return, const CreateMissionRequest& request);
  void send_CreateMission(const CreateMissionRequest& request);
  void recv_CreateMission(CreateMissionResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LobbyServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LobbyServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LobbyServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ListServers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_JoinMission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateMission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LobbyServiceProcessor(boost::shared_ptr<LobbyServiceIf> iface) :
    iface_(iface) {
    processMap_["Login"] = &LobbyServiceProcessor::process_Login;
    processMap_["ListServers"] = &LobbyServiceProcessor::process_ListServers;
    processMap_["JoinMission"] = &LobbyServiceProcessor::process_JoinMission;
    processMap_["FindPlayer"] = &LobbyServiceProcessor::process_FindPlayer;
    processMap_["CreateMission"] = &LobbyServiceProcessor::process_CreateMission;
  }

  virtual ~LobbyServiceProcessor() {}
};

class LobbyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LobbyServiceProcessorFactory(const ::boost::shared_ptr< LobbyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LobbyServiceIfFactory > handlerFactory_;
};

class LobbyServiceMultiface : virtual public LobbyServiceIf {
 public:
  LobbyServiceMultiface(std::vector<boost::shared_ptr<LobbyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LobbyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LobbyServiceIf> > ifaces_;
  LobbyServiceMultiface() {}
  void add(boost::shared_ptr<LobbyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Login(LoginResponse& _return, const LoginRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Login(_return, request);
    }
    ifaces_[i]->Login(_return, request);
    return;
  }

  void ListServers(ListServersResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ListServers(_return);
    }
    ifaces_[i]->ListServers(_return);
    return;
  }

  void JoinMission(JoinMissionResponse& _return, const JoinMissionRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->JoinMission(_return, request);
    }
    ifaces_[i]->JoinMission(_return, request);
    return;
  }

  void FindPlayer(FindPlayerResponse& _return, const FindPlayerRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindPlayer(_return, request);
    }
    ifaces_[i]->FindPlayer(_return, request);
    return;
  }

  void CreateMission(CreateMissionResponse& _return, const CreateMissionRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateMission(_return, request);
    }
    ifaces_[i]->CreateMission(_return, request);
    return;
  }

};

} // namespace

#endif
